W04: Linked Lists

1. What is the difference between a linked list and
   a dynamic array?



2. What is one of the strengths of a linked list?

3. What is one of the drawbacks of a linked list?




Problem 1: Insert Tail
    Implement the InsertTail function in the LinkedList class. The function should add a new node (Node) at the end of the linked list. 
        Hint: Consider the code already written for InsertHead.

-- Robert : Connect new node prev to tail next node
 
the code is something like curr.Prev!.Next = curr.Prev

-- Eric: 
adjust InsertHead function to meet the needs InsertTail
 



Problem 2: Remove Tail
    Implement the RemoveTail function in the LinkedList class. The function should remove the last node.

        Hint: Consider the code already written for RemoveHead

-- Teniece 
Essentially do what we did with InsertHead/InsertTail

Problem 3: Remove
    Implement the Remove function in the LinkedList class. The function will need to search for the node (starting at the head) that contains the value and then remove that one node. The function should not continue searching the list once a match has been found and the node has been deleted. 
        
        Hint: You may be able to reuse the RemoveHead and RemoveTail functions.


group:
Adjust InsertAfter method to work on the remove code.

Problem 4: Replace
    Implement the Replace function in the LinkedList class. The function should search for all nodes that are equal to oldValue and then replace the value in those nodes with newValue. Unlike the remove function, this function should continue searching through the list to replace all values that match oldValue.

Problem 5: Reversed Iterator
    The GetEnumerator function provides the ability to iterate forward through a LinkedList object using a foreach loop such as foreach (var item in myLinkedList). When a foreach loop starts, the GetEnumerator function will start. Each time the yield return statement runs, it will provide a new value to the foreach loop and pause the GetEnumerator function. When the foreach loop goes to the next iteration, it will continue running the GetEnumerator function again until it gets to the next yield return which will provide the next value to the foreach loop. 

    You can use the following test code to see how the GetEnumerator function works:


    foreach(var item in myLinkedList)
    {
        Debug.WriteLine(item);
    }


    The Reverse function is used to iterate backwards. Implement the Reverse function in the LinkedList class. 
        
        Hint: Pattern your solution after the GetEnumerator function that was already written for you and that was described above. To test the Reverse function, you can use the following code:


    foreach(var item in myLinkedList.Reverse())
    {
        Debug.WriteLine(item);
    }

    overall consensus: utilize the code written to fit our needs.